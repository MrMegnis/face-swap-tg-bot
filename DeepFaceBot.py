import os, sys

# –ø—É—Ç—å –∫ CUDA Runtime DLL
cuda_bin = r"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1\bin"

# 1) –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π PATH, —á—Ç–æ–±—ã shutil.which —Ä–∞–±–æ—Ç–∞–ª –∏ Windows –∏—Å–∫–∞–ª cudart64_12.dll
os.environ["PATH"] = cuda_bin + os.pathsep + os.environ.get("PATH", "")

# 2) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ DLL (Python 3.8+)
if hasattr(os, "add_dll_directory"):
    os.add_dll_directory(cuda_bin)

import cv2
import time
import subprocess
import shlex
import aiohttp
import ffmpeg
import tempfile
import asyncio
from io import BytesIO
from concurrent.futures import ThreadPoolExecutor, as_completed
import numpy as np
from PIL import Image, ImageSequence, UnidentifiedImageError
from io import BytesIO
from dotenv import load_dotenv, dotenv_values
from telegram import Update, InputFile
from telegram.error import BadRequest
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters, CommandHandler
from DeepFace_Img2Img.src.main import FaceSwapper
import shutil
from pathlib import Path

import onnxruntime, os

# –ø—É—Ç—å –¥–æ __init__.py
base = os.path.dirname(onnxruntime.__file__)
# –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
candidates = [base, os.path.join(base, "capi"), os.path.join(base, "providers")]
for d in candidates:
    dll = os.path.join(d, "onnxruntime_providers_cuda.dll")
    if os.path.isfile(dll):
        print("CUDA-DLL –Ω–∞–π–¥–µ–Ω –≤:", d)

import shutil

print("ffmpegÊâæCUDA DLL:", shutil.which("cudart64_12.dll"))  # –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—É—Ç—å
print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:", onnxruntime.get_available_providers())
print("cudart –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–¥–µ—Å—å:", shutil.which("cudart64_12.dll"))
print("–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã ONNX Runtime:", onnxruntime.get_available_providers())

cuda_bin = r"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1\bin"
print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ CUDA bin:")
for f in os.listdir(cuda_bin):
    if f.lower().startswith("cudart64"):
        print("  ", f)

swapper = FaceSwapper()

user_photos = {}
user_tasks = {}  # user_id -> {'cancel': False}

SPINNERS = ["|", "/", "-", "\\"]
SAVE_OUTPUTS = False  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—ã—Ä–æ–µ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –≤ ./saved

# –ü–∞–ø–∫–∞, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
CUSTOM_TEMP_DIR = Path("./tmp")
CUSTOM_TEMP_DIR.mkdir(parents=True, exist_ok=True)
tempfile.tempdir = str(CUSTOM_TEMP_DIR)

USE_PARALEL_VIDEO = True

FFMPEG_BIN = "C:/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/_____Projects/face-swap-tg-bot/ffmpeg-2025-04-17-git-7684243fbe-essentials_build/bin/ffmpeg.exe"


async def download_telegram_file(file_path, dest_path, bot_token, progress_message):
    """
    –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ—Ç–æ–∫–æ–≤–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º progress_message:
     - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º %, –ú–ë —Å–∫–∞—á–∞–Ω–æ / –≤—Å–µ–≥–æ.
    """
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL
    fp = file_path
    if fp.startswith("http"):
        url = fp
    else:
        url = f"https://api.telegram.org/file/bot{bot_token}/{fp}"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            resp.raise_for_status()
            total = int(resp.headers.get("Content-Length", 0))
            downloaded = 0
            last_pct = 0

            with open(dest_path, "wb") as f:
                async for chunk in resp.content.iter_chunked(64 * 1024):
                    f.write(chunk)
                    downloaded += len(chunk)
                    if total:
                        pct = int(downloaded / total * 100)
                        # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ +2%
                        if pct - last_pct >= 2 or pct == 100:
                            last_pct = pct
                            mbs = downloaded / (1024 ** 2)
                            total_mbs = total / (1024 ** 2)
                            text = f"üì• –°–∫–∞—á–∏–≤–∞—é: {pct}% ‚Äî {mbs:.1f}/{total_mbs:.1f} –ú–ë"
                            try:
                                await progress_message.edit_text(text)
                            except:
                                pass


def image_to_bytesio(img: Image.Image) -> BytesIO:
    buf = BytesIO()
    img.save(buf, format="PNG")
    buf.seek(0)
    return buf


def swap_frame_bgr(frame_bgr, source_img):
    """
    –ú–µ–Ω—è–µ–º –ª–∏—Ü–æ –Ω–∞ –æ–¥–Ω–æ–º BGR‚Äë–∫–∞–¥—Ä–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∂–µ BGR.
    source_img ‚Äî –∏—Å—Ö–æ–¥–Ω—ã–π PIL.Image, –∞ –Ω–µ BytesIO.
    """
    # 1) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±—É—Ñ–µ—Ä–æ–≤ –¥–ª—è PIL.open ‚Äî –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ —Å–≤–æ–π –±—É—Ñ–µ—Ä!
    #    –°–Ω–∞—á–∞–ª–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ –ª–∏—Ü–æ:
    src_buf = image_to_bytesio(source_img)
    #    –ü–æ—Ç–æ–º —ç—Ç–æ—Ç –∫–∞–¥—Ä:
    pil = Image.fromarray(cv2.cvtColor(frame_bgr, cv2.COLOR_BGR2RGB))
    tgt_buf = image_to_bytesio(pil)

    # 2) –°–∞–º —Å–≤–∞–ø
    swapped_pil = swapper.swap_face(src_buf, tgt_buf, full_generate=False)

    # 3) –û–±—Ä–∞—Ç–Ω–æ –≤ BGR
    return cv2.cvtColor(np.array(swapped_pil), cv2.COLOR_RGB2BGR)


async def process_video_parallel(source_img, video_path, output_path, progress_message, user_id):
    # 1) –°—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–¥—Ä—ã
    cap = cv2.VideoCapture(video_path)
    fps = cap.get(cv2.CAP_PROP_FPS) or 25.0
    w, h = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)), int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

    frames = []
    while True:
        ret, frame = cap.read()
        if not ret: break
        frames.append(frame)
    cap.release()

    # 2) –ì–æ—Ç–æ–≤–∏–º VideoWriter
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (w, h))

    # 3) –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å–≤–∞–ø–∏–º –∫–∞–¥—Ä—ã
    swapped_dict = {}
    start_time = time.time()
    spinner = 0

    with ThreadPoolExecutor(max_workers=4) as pool:
        futures = {
            pool.submit(swap_frame_bgr, frame, source_img): idx
            for idx, frame in enumerate(frames)
        }
        for done in as_completed(futures):
            idx = futures[done]
            try:
                swapped = done.result()
            except Exception as e:
                print(f"[ERROR] swap_frame_bgr idx={idx}", e)
                swapped = frames[idx]
            swapped_dict[idx] = swapped

            # –∞–ø–¥–µ–π—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            await update_progress_message(
                progress_message,
                len(swapped_dict),
                total_frames,
                start_time,
                spinner
            )
            spinner += 1

    # 4) –ó–∞–ø–∏—Å—å –≤ –ø–æ—Ä—è–¥–∫–µ
    for i in range(total_frames):
        out.write(swapped_dict[i])
    out.release()

    await edit_text_safely(progress_message, "–ì–æ—Ç–æ–≤–æ!")


def video_to_gif(input_video: str, output_gif: str, fps: int = 8, width: int = 320):
    """
    MP4 ‚Üí –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GIF:
      1) palettegen —Å -frames:v 1
      2) paletteuse + loop=0
      3) —É–¥–∞–ª—è–µ–º –ø–∞–ª–∏—Ç—Ä—É
    """
    palette = output_gif.replace(".gif", "_palette.png")

    # 1) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞–ª–∏—Ç—Ä—É ‚Äî —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –∫–∞–¥—Ä!
    cmd1 = [
        FFMPEG_BIN,
        "-y",
        "-loglevel", "error",
        "-i", input_video,
        "-vf", f"fps={fps},scale={width}:-1:flags=lanczos,palettegen",
        "-frames:v", "1",  # <- –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
        palette
    ]
    subprocess.run(cmd1, check=True)

    # 2) –°–æ–±–∏—Ä–∞–µ–º GIF –ø–æ –ø–∞–ª–∏—Ç—Ä–µ
    cmd2 = [
        FFMPEG_BIN,
        "-y",
        "-loglevel", "error",
        "-i", input_video,
        "-i", palette,
        "-filter_complex",
        f"fps={fps},scale={width}:-1:flags=lanczos[x];[x][1:v]paletteuse",
        "-loop", "0",
        output_gif
    ]
    subprocess.run(cmd2, check=True)

    # 3) –£–¥–∞–ª—è–µ–º –ø–∞–ª–∏—Ç—Ä—É —Å—Ä–∞–∑—É –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    try:
        os.remove(palette)
    except OSError:
        pass


# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
async def edit_text_safely(message, new_text):
    try:
        if message.text != new_text:
            await message.edit_text(new_text)
            # await asyncio.sleep(1)
    except Exception as e:
        print("Edit message error:", e)


# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ ETA
async def update_progress_message(message, current, total, start_time, spinner_index):
    if current % 20 == 0:
        percent = int(current / total * 100)
        blocks = int(percent / 10)
        bar = '‚ñì' * blocks + '‚ñë' * (10 - blocks)

        elapsed = time.time() - start_time
        remaining = (elapsed / current) * (total - current) if current else 0
        eta = f"{int(remaining)}s" if remaining < 120 else f"{int(remaining // 60)}m"
        spinner = SPINNERS[spinner_index % len(SPINNERS)]

        text = f"–û–±—Ä–∞–±–æ—Ç–∫–∞: [{bar}] {percent}% ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å ~{eta} ‚è≥ {spinner}"
        await edit_text_safely(message, text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ GIF
async def process_gif(source_img, gif_source, output_path, progress_message, user_id):
    # gif_source ‚Äî –ª–∏–±–æ –ø—É—Ç—å, –ª–∏–±–æ —Ñ–∞–π–ª–æ–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º read()/seek()
    if isinstance(gif_source, (str, Path)):
        gif = Image.open(gif_source)
    else:
        gif_source.seek(0)
        gif = Image.open(gif_source)

    frames = list(ImageSequence.Iterator(gif))
    duration = gif.info.get("duration", 50)
    total = len(frames)
    processed = []
    source_buf = image_to_bytesio(source_img)
    start_time = time.time()

    for i, frame in enumerate(frames):
        if user_tasks.get(user_id, {}).get("cancel"):
            print(f"[CANCEL] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await edit_text_safely(progress_message, "‚õî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
        frame_buf = BytesIO()
        frame.convert("RGB").save(frame_buf, format="PNG")
        frame_buf.seek(0)

        swapped = swapper.swap_face(source_buf, frame_buf, full_generate=False)
        processed.append(swapped.convert("P"))

        if i % 2 == 0:
            await update_progress_message(progress_message, i + 1, total, start_time, i)

    processed[0].save(output_path, save_all=True, append_images=processed[1:], loop=0, duration=duration)
    await update_progress_message(progress_message, total, total, start_time, total)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
async def process_video(source_img, video_path, output_path, progress_message, user_id):
    cap = cv2.VideoCapture(video_path)
    fps = cap.get(cv2.CAP_PROP_FPS) or 25.0
    w, h = int(cap.get(3)), int(cap.get(4))
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (w, h))

    frame_num = 0
    start_time = time.time()

    try:

        while cap.isOpened():
            print(user_id, user_tasks)
            if user_tasks.get(user_id, {}).get("cancel"):
                print(f"[CANCEL] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await edit_text_safely(progress_message, "‚õî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                cap.release()
                out.release()
                return
            ret, frame = cap.read()
            if not ret:
                break

            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            pil_frame = Image.fromarray(frame_rgb)

            swapped = swapper.swap_face(
                input_source=image_to_bytesio(source_img),
                target_source=image_to_bytesio(pil_frame),
                full_generate=False
            )

            frame_bgr = cv2.cvtColor(np.array(swapped), cv2.COLOR_RGB2BGR)
            out.write(frame_bgr)

            frame_num += 1
            if frame_num % 5 == 0:
                await asyncio.sleep(0)
                await update_progress_message(progress_message, frame_num, total_frames, start_time, frame_num)

    finally:
        cap.release()
        out.release()

    await edit_text_safely(progress_message, "–ì–æ—Ç–æ–≤–æ!")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def process_image(source_img, target_path):
    with open(target_path, "rb") as f:
        return swapper.swap_face(
            input_source=image_to_bytesio(source_img),
            target_source=f,
            full_generate=True
        )


def fix_video_with_ffmpeg(input_path: str, output_path: str):
    try:
        ffmpeg.input(input_path).output(
            output_path,
            vcodec='libx264',
            pix_fmt='yuv420p',
            profile='baseline',
            preset='fast',
            movflags='faststart',
            crf=23
        ).overwrite_output().run(
            cmd=FFMPEG_BIN,
            quiet=True)
        print(f"[FFMPEG] –í–∏–¥–µ–æ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ: {output_path}")
        return True
    except ffmpeg.Error as e:
        print("[FFMPEG] –û—à–∏–±–∫–∞:", e.stderr.decode())
        return False


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_tasks:
        user_tasks[user_id] = {"cancel": False}

    # 1) –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç File (–Ω–æ –µ—â—ë –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º –≤ –ø–∞–º—è—Ç—å)
    try:
        if update.message.photo:
            file_ext = "jpg"
            file = await update.message.photo[-1].get_file()
        elif update.message.video:
            file_ext = "mp4"
            file = await update.message.video.get_file()
        elif update.message.animation:
            file_ext = "gif"
            file = await update.message.animation.get_file()
        elif update.message.document:
            file_ext = update.message.document.file_name.split('.')[-1].lower()
            file = await update.message.document.get_file()
        else:
            return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF.")
        fp = file.file_path
    except BadRequest as e:
        # Telegram API –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ñ–∞–π–ª—ã >20 –ú–ë, –Ω–æ –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        if "File is too big" in str(e):
            print(f"[WARN] get_file() –≤–æ–∑–≤—Ä–∞—Ç–∏–ª BadRequest ({e}), –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É")
            await update.message.reply_text(
                "‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è get_file(), –∑–∞–≥—Ä—É–∂–∞—é –ø–æ—Ç–æ–∫–æ–≤–æ –ø–æ URL‚Ä¶"
            )
            # –¢–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º file –≤—Ä—É—á–Ω—É—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ URL
            # –î–ª—è –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if update.message.video:
                fp = update.message.video.file_path
            elif update.message.document:
                fp = update.message.document.file_path
            # else:
            #     fp = update.message.photo[-1].file_id  # –î–ª—è —Ñ–æ—Ç–æ (—Ö–æ—Ç—è –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)

        else:
            raise

    # 2) –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –≤ –Ω–µ–≥–æ –ø–æ—Ç–æ–∫–æ–≤–æ
    fd, input_path = tempfile.mkstemp(suffix=f".{file_ext}")
    os.close(fd)

    progress_msg = await update.message.reply_text("üì• –ì–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é‚Ä¶")
    await download_telegram_file(fp, input_path, context.bot.token, progress_msg)

    await progress_msg.edit_text("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É‚Ä¶")

    print(f"[DEBUG] –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤ handle_file, file_ext={file_ext}, input_path={input_path}")

    # 3) –¢–µ–ø–µ—Ä—å, –∫–∞–∫ —Ä–∞–Ω—å—à–µ, —Ä–∞–±–æ—Ç–∞–µ–º —Å input_path
    source_pil = user_photos.get(user_id, {}).get("source")
    if not source_pil:
        if file_ext in ["jpg", "jpeg", "png"]:
            img = Image.open(input_path).convert("RGB")
            user_photos[user_id] = {"source": img}
            os.remove(input_path)
            return await update.message.reply_text("–õ–∏—Ü–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ –∏–ª–∏ GIF.")
        else:
            os.remove(input_path)
            return await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å *—Ñ–æ—Ç–æ*, –∞ –ø–æ—Ç–æ–º ‚Äî –≤–∏–¥–µ–æ –∏–ª–∏ GIF –¥–ª—è —Å–≤–æ–ø–∞."
            )

    await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É‚Ä¶")
    progress_message = await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞: [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%")

    # fd, input_path = tempfile.mkstemp(suffix=f".{file_ext}")
    # with os.fdopen(fd, "wb") as f:
    #     f.write(input_path)

    # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ temp
    output_path = input_path.replace(f".{file_ext}",
                                     "_swapped.mp4" if file_ext in ["mp4", "avi", "mov"] else f"_swapped.{file_ext}")

    try:
        if file_ext in ["jpg", "jpeg", "png"]:
            result = process_image(source_pil, input_path)
            result.save(output_path)
            await progress_message.delete()
            with open(output_path, "rb") as f:
                img_bytes = BytesIO(f.read())
                img_bytes.name = "result.jpg"  # Telegram —Ç—Ä–µ–±—É–µ—Ç –∏–º—è
                await update.message.reply_photo(photo=img_bytes)

        elif file_ext == "gif":
            # 1) –≤—Å–µ–≥–¥–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏–º –∫–∞–∫ –≤–∏–¥–µ–æ + GIF, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
            await edit_text_safely(progress_message, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é GIF –∫–∞–∫ –≤–∏–¥–µ–æ‚Ä¶")
            mp4_input = input_path.replace(".gif", ".mp4")
            os.replace(input_path, mp4_input)

            # 2) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–∞–ø-–≤–∏–¥–µ–æ
            video_out = mp4_input.replace(".mp4", "_swapped.mp4")
            await process_video(source_pil, mp4_input, video_out, progress_message, user_id)

            # 3) –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è MP4 ‚Üí GIF
            await edit_text_safely(progress_message, "–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É—é GIF‚Ä¶")
            gif_out = mp4_input.replace(".mp4", "_swapped.gif")
            video_to_gif(video_out, gif_out)

            # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —á–∏—Å—Ç–∏–º
            with open(gif_out, "rb") as f:
                buf = BytesIO(f.read())
                buf.name = "result.gif"
                await update.message.reply_animation(animation=buf)

            for p in (mp4_input, video_out, gif_out):
                if os.path.exists(p):
                    try:
                        os.remove(p)
                    except:
                        pass

        elif file_ext in ["mp4", "avi", "mov"]:
            if USE_PARALEL_VIDEO:
                print(f"[DEBUG] –ó–∞–ø—É—Å–∫–∞—é video swap –¥–ª—è {input_path} -> {output_path}")
                await process_video_parallel(source_pil, input_path, output_path, progress_message, user_id)
            else:
                await process_video(source_pil, input_path, output_path, progress_message, user_id)

            final_path = None
            success = False

            if SAVE_OUTPUTS:
                save_dir = Path("./saved")
                save_dir.mkdir(exist_ok=True)

                timestamp = int(time.time())
                raw_name = f"user{user_id}_{timestamp}_raw.mp4"
                final_name = f"user{user_id}_{timestamp}_final.mp4"
                raw_path = save_dir / raw_name
                final_path = save_dir / final_name

                shutil.copyfile(output_path, raw_path)
                print(f"[DEBUG] –°—ã—Ä–æ–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {raw_path}")

                success = fix_video_with_ffmpeg(str(raw_path), str(final_path))
            else:
                print(f"[DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                # –ø—Ä–æ—Å—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ mp4
                final_path = output_path.replace(".mp4", "_final.mp4")
                print("–ü—É—Ç–∏:", output_path, final_path)
                success = fix_video_with_ffmpeg(output_path, final_path)

            if success and os.path.getsize(final_path) > 100_000:
                print(f"[DEBUG] –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {final_path}")

                video_size = os.path.getsize(final_path)
                if video_size >= 49_000_000:
                    await update.message.reply_text("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è Telegram-–ø–ª–µ–µ—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ —Ñ–∞–π–ª.")
                    await update.message.reply_document(document=InputFile(str(final_path)))
                else:
                    with open(final_path, "rb") as f:
                        video_bytes = BytesIO(f.read())
                        video_bytes.name = "video.mp4"
                        await update.message.reply_video(video=video_bytes)
            else:
                await edit_text_safely(progress_message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤–∏–¥–µ–æ.")

        else:
            await edit_text_safely(progress_message, "–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        await edit_text_safely(progress_message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")

    user_photos.pop(user_id, None)
    user_tasks.pop(user_id, None)
    try:
        os.remove(input_path)
    except OSError:
        pass
    if os.path.exists(output_path):
        try:
            os.remove(output_path)
        except OSError:
            pass


async def cancel_generation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_tasks:
        user_tasks[user_id]["cancel"] = True
        await update.message.reply_text("‚õî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è‚Ä¶")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


def main():
    load_dotenv()
    TOKEN = os.getenv("TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(
        filters.PHOTO | filters.VIDEO | filters.ANIMATION | filters.Document.IMAGE | filters.Document.VIDEO,
        handle_file
    ))
    app.add_handler(CommandHandler("cancel", cancel_generation))
    print("device = ", swapper.device)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()


if __name__ == "__main__":
    main()
